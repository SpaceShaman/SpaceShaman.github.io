{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":"<p>Hi, I'm SpaceShaman and this is my blog. I will write here about programming, deep learning, NLP and other interesting topics. I hope you will find something interesting here. If you have any questions or suggestions, feel free to contact me via email spaceshaman@tuta.io</p>"},{"location":"2023/12/15/django-private-docs/","title":"Createing private documentation with Django and MkDocs","text":"<p>In this article, I will show you how to create private documentation that can only be accessed by users with the appropriate permissions. We will use Django: Django and Material for MkDocs.</p>"},{"location":"2023/12/15/django-private-docs/#dependencies","title":"Dependencies","text":""},{"location":"2023/12/15/django-private-docs/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>Material for MkDocs is an extension for MkDocs, that adds new features and changes the look of the documentation (The page you are currently reading is written using Material for MkDocs). In this article, we will use Material for MkDocs, but if you want to use the regular MkDocs, it should not be a problem.</p>"},{"location":"2023/12/15/django-private-docs/#django","title":"Django","text":"<p>Django is a popular framework for creating web applications.</p>"},{"location":"2023/12/15/django-private-docs/#preparing-the-django-project","title":"Preparing the Django Project","text":"<p>The first step is to create a Django project and an application to display the documentation.</p> <ol> <li> <p>Install Django and Material for MkDocs</p> <pre><code>pip install django mkdocs-material\n</code></pre> </li> <li> <p>Create a Django project</p> <pre><code>django-admin startproject private_docs\n</code></pre> </li> <li> <p>Create a Django application to display the documentation</p> <pre><code>cd private_docs\ndjango-admin startapp doc_viewer\n</code></pre> </li> <li> <p>Add the application to the <code>settings.py</code> file</p> <pre><code># private_docs/settings.py\nINSTALLED_APPS = [\n    ...\n    'doc_viewer',\n]\n</code></pre> </li> <li> <p>Add the path to the <code>assets</code> folder of the documentation to the static files of Django (without this, images will not be displayed)</p> <pre><code># private_docs/settings.py\nSTATIC_ROOT = os.path.join(BASE_DIR, \".static\")\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \".docs/assets\"),\n]\n</code></pre> </li> <li> <p>Add the path to the view that displays the documentation to the <code>urls.py</code> file</p> <pre><code># private_docs/urls.py\nfrom django.urls import re_path\nfrom doc_viewer.views import docs_view\n\nurlpatterns = [\n    re_path(r\"^docs/(?P&lt;path&gt;.*)$\", docs_view, name=\"docs\"),\n]\n</code></pre> </li> </ol>"},{"location":"2023/12/15/django-private-docs/#creating-the-mkdocs-documentation","title":"Creating the MkDocs Documentation","text":"<p>The next step is to create the documentation. To do this, create a file mkdocs.yml in the main project directory and add the following code to it:</p> <pre><code># mkdocs.yml\nsite_name: Private Docs\nuse_directory_urls: false # This is important to correctly display the documentation via Django\nsite_dir: .docs # This is a directory where the documentation will be generated\ntheme:\n    name: material # If you want to use the default MkDocs theme, remove this line\n</code></pre> <p>Then create a directory <code>docs</code>, in which we will place the documentation files written in Markdown. You can also create a file <code>docs/index.md</code> which will be the main page of the documentation.</p>"},{"location":"2023/12/15/django-private-docs/#creating-the-django-view-to-display-the-documentation","title":"Creating the Django View to Display the Documentation","text":"<p>The next step is to create the Django view to display the documentation. To do this, open the file <code>doc_viewer/views.py</code> and add the following code to it:</p> <pre><code># doc_viewer/views.py\nimport os\nfrom django.conf import settings\nfrom django.contrib.auth.decorators import permission_required\nfrom django.http import HttpResponse, HttpResponseNotFound\n\n@permission_required(\"permission_name\") # Replace permission_name with the name of the permission that will be required to view the documentation\nimport os\n\nfrom django.conf import settings\nfrom django.contrib.auth.decorators import permission_required\nfrom django.http import HttpResponse, HttpResponseNotFound\n\n\n@permission_required(\n    \"doc_viewer.view_docs\"\n)  # Replace permission_name with the name of the permission that will be required to view the documentation\ndef docs_view(request, path) -&gt; HttpResponseNotFound | HttpResponse:\n    mkdocs_path = os.path.join(settings.BASE_DIR, \".docs\")\n    # Check if the documentation exists\n    if not os.path.exists(mkdocs_path):\n        return HttpResponseNotFound(\"Documentation does not exist.\")\n\n    # If the path is empty, display the home page\n    if path == \"\":\n        path = \"index.html\"\n\n    # Check if the file for the given path exists in the documentation\n    file_path = os.path.join(mkdocs_path, path)\n    if not os.path.isfile(file_path):\n        return HttpResponseNotFound(\"Page does not exist.\")\n\n    # Reading the contents of the file\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        content = f.read()\n\n    # If the file is an HTML file, replace relative paths with absolute paths\n    if path.endswith(\".html\"):\n        url = request._current_scheme_host\n        content = content.replace('\"assets/', f'\"{url}/static/')\n        content = content.replace('\"../assets/', f'\"{url}/static/')\n        content = content.replace('\"../../assets/', f'\"{url}/static/')\n        content = content.replace('\"img/', f'\"{url}/static/img/')\n        content = content.replace('\"../img/', f'\"{url}/static/img/')\n        content = content.replace('\"../../img/', f'\"{url}/static/img/')\n\n    # Return the contents of the file\n    return HttpResponse(content)\n</code></pre>"},{"location":"2023/12/15/django-private-docs/#running-the-project","title":"Running the Project","text":"<p>Congratulations! Your project is now ready. All you need to do is generate the documentation and start the Django server. To do this, follow these steps:</p> <ol> <li> <p>Generate the documentation</p> <pre><code>mkdocs build\n</code></pre> </li> <li> <p>Run migrations and collectstatic</p> <pre><code>python manage.py migrate\npython manage.py collectstatic\n</code></pre> </li> <li> <p>Create a superuser</p> <pre><code>python manage.py createsuperuser\n</code></pre> </li> <li> <p>Run the Django server</p> <pre><code>python manage.py runserver\n</code></pre> </li> <li> <p>Go to the admin panel http://localhost:8000/admin/ and log in with the superuser account you created in step 3.</p> </li> <li> <p>You're done! Now you can go to the page http://localhost:8000/docs/ and see your documentation.</p> </li> </ol>"},{"location":"2023/12/15/django-private-docs/#summary","title":"Summary","text":"<p>In this article, I showed you how to create private documentation using Django and Material for MkDocs. If you have any questions or comments, please post them in the comments section below. If you want to stay up-to-date with my articles, add my blog to your favorite RSS feeds. See you in the next article!</p>"},{"location":"2023/12/15/django-private-docs/#final-project","title":"Final Project","text":"<p>You can find the final project on GitHub.</p>"},{"location":"archive/2023/","title":"2023","text":""},{"location":"category/python/","title":"Python","text":""},{"location":"category/django/","title":"Django","text":""}]}